var dataset;

var formatDateIntoDay = d3.timeFormat("%d");
var formatDate = d3.timeFormat("%a %d");
var parseDate = d3.timeParse("%d/%m/%y/%H:%M");

var startDate = new Date("2022-03-31"),
    endDate = new Date("2022-05-03");
var getExpenseValue = function(d) {
    return Math.sqrt(d.expense) * 3
}
var getExpenseValueZoom = function(d) {
    return Math.sqrt(d.expense) * 3 * 1.2
}
var zIndexExpense = function(d) {
    return 999 - (Math.round(d.expense / 3))
}

var margin = {
        top: 0,
        right: 50,
        bottom: 0,
        left: 50
    },
    width = window.innerWidth - margin.left - margin.right,
    height = 200 - margin.top - margin.bottom,
    fullHeight = window.innerHeight - height,
    halfWidth = window.innerWidth / 2,
    halfHeight = window.innerHeight / 2;

////////// slider //////////

var svgSlider = d3.select("#slider")
    .append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", 200);

var x = d3.scaleTime()
    .domain([startDate, endDate])
    .range([0, width])
    .clamp(true);

var y = (hour) => (fullHeight - 250 - (fullHeight - 250) * hour / 24) + halfHeight / 1.5;

var slider = svgSlider.append("g")
    .attr("class", "slider")
    .attr("transform", "translate(" + margin.left + "," + height / 2 + ")");

slider
    .append("line")
    .attr("class", "track")
    .attr("x1", x.range()[0])
    .attr("x2", x.range()[1])
    .select(function() {
        return this.parentNode.appendChild(this.cloneNode(true));
    })
    .attr("class", "track-inset")
    .select(function() {
        return this.parentNode.appendChild(this.cloneNode(true));
    })
    .attr("class", "track-overlay")
    .call(d3.drag()
        .on("start.interrupt", function() {
            slider.interrupt();
        })
        .on("start drag", function() {
            update(x.invert(d3.event.x));
        }));

slider
    .insert("g", ".track-overlay")
    .attr("class", "ticks")
    .attr("transform", "translate(0," + 18 + ")")
    .selectAll("text")
    .data(x.ticks(34))
    .enter()
    .append("text")
    .attr("x", x)
    .attr("y", 10)
    .attr("text-anchor", "middle")
    .text(function(d) {
        return formatDateIntoDay(d);
    });

var handle = slider.insert("circle", ".track-overlay")
    .attr("class", "handle")
    .attr("r", 9);

var label = slider.append("text")
    .attr("class", "label")
    .attr("text-anchor", "middle")
    .text(formatDate(startDate))
    .attr("transform", "translate(0," + (-25) + ")")

////////// plot //////////

var svgPlot = d3.select("#vis")
    .append("svg")
    .attr("id", "canvas")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height);

var plot = svgPlot.append("g")
    .attr("class", "plot")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");


d3.csv("/assets/data/expenses_max.csv", prepare, function(data) {
    dataset = data;
    drawPlot(dataset);
})

function prepare(d) {
    d.id = d.id;
    d.date = parseDate(d.date);
    d.expense = d.expense;
    d.type = d.type
    d.timestamp = Date.parse(d.date);
    d.xpos = parseInt(x(d.date));
    //console.log(d.x)

    return d;
}

function drawPlot(data) {
    var locations = plot.selectAll(".location")
        .data(data);

    // var plotMarginX = 200,
    //     plotMarginy = 200,
    //     maxPlotHeight = fullHeight - plotMarginy * 5 / 4,
    //     maxPlotWidth = width - 2 * plotMarginX;

    // Colors

    let black = "#000000",
        red = "#ff3333",
        rose = "#ffcccc",
        violet = "#663399",
        navy = "#000066";

    var colors = {
        "bills": black,
        "items": rose,
        "food": red,
        "clothes": violet,
        "travel": navy,
    }

    // var colors = [black, red, rose, violet, navy];

    var PopUp = d3.select("#vis")
        .append("div")
        .attr("class", "popup");

    var kaChing = d3.select("#vis")
        .append("svg")
        .attr("class", "kaching")
        .append("g")
        .html(`
            <path class="cls-1" d="M88.38,132.79c-.24-1.64-1.76-2.77-3.4-2.54-1.64,.24-2.77,1.76-2.54,3.4l1.7,11.63c.22,1.49,1.5,2.57,2.96,2.57,.14,0,.29,0,.44-.03,1.64-.24,2.77-1.76,2.54-3.4l-1.7-11.63Z"/>
            <path class="cls-1" d="M64.92,16.61c.22,1.49,1.5,2.57,2.96,2.57,.14,0,.29,0,.44-.03,1.64-.24,2.77-1.76,2.54-3.4l-1.7-11.63c-.24-1.64-1.76-2.77-3.4-2.54-1.64,.24-2.77,1.76-2.54,3.4l1.7,11.63Z"/>
            <path class="cls-1" d="M17.6,82.53c-.24-1.64-1.75-2.77-3.4-2.54l-11.63,1.7c-1.64,.24-2.77,1.76-2.54,3.4,.22,1.49,1.5,2.57,2.96,2.57,.14,0,.29,0,.44-.03l11.63-1.7c1.64-.24,2.77-1.76,2.54-3.4Z"/>
            <path class="cls-1" d="M135.71,65.87c.22,1.49,1.5,2.57,2.96,2.57,.14,0,.29,0,.44-.03l11.63-1.7c1.64-.24,2.77-1.76,2.54-3.4s-1.76-2.77-3.4-2.54l-11.63,1.7c-1.64,.24-2.77,1.76-2.54,3.4Z"/>
            <path class="cls-1" d="M111.11,26.97c.54,.4,1.17,.59,1.79,.59,.92,0,1.82-.42,2.41-1.21l7.02-9.42c.99-1.33,.72-3.21-.61-4.2-1.33-.99-3.21-.72-4.2,.61l-7.02,9.42c-.99,1.33-.72,3.21,.61,4.2Z"/>
            <path class="cls-1" d="M42.2,121.43c-1.33-.99-3.21-.72-4.2,.61l-7.02,9.42c-.99,1.33-.72,3.21,.61,4.2,.54,.4,1.17,.59,1.79,.59,.92,0,1.82-.42,2.41-1.21l7.02-9.42c.99-1.33,.72-3.21-.61-4.2Z"/>
            <path class="cls-1" d="M137.51,116.07l-9.42-7.02c-1.33-.99-3.21-.72-4.2,.61-.99,1.33-.72,3.21,.61,4.2l9.42,7.02c.54,.4,1.17,.59,1.79,.59,.92,0,1.82-.42,2.41-1.21,.99-1.33,.72-3.21-.61-4.2Z"/>
            <path class="cls-1" d="M28.81,34.55l-9.42-7.02c-1.33-.99-3.21-.72-4.2,.61s-.72,3.21,.61,4.2l9.42,7.02c.54,.4,1.17,.59,1.79,.59,.92,0,1.82-.42,2.41-1.21,.99-1.33,.72-3.21-.61-4.2Z"/>
            <path class="cls-1" d="M110.3,124.77c-.85-1.42-2.69-1.89-4.11-1.04-1.42,.85-1.89,2.69-1.04,4.11l6.02,10.09c.56,.94,1.56,1.46,2.58,1.46,.52,0,1.05-.14,1.53-.42,1.42-.85,1.89-2.69,1.04-4.11l-6.02-10.09Z"/>
            <path class="cls-1" d="M43.01,23.63c.56,.94,1.56,1.46,2.58,1.46,.52,0,1.05-.14,1.53-.42,1.42-.85,1.89-2.69,1.04-4.11l-6.02-10.09c-.85-1.42-2.69-1.89-4.11-1.04-1.42,.85-1.89,2.69-1.04,4.11l6.02,10.09Z"/>
            <path class="cls-1" d="M21.01,104.69l-10.09,6.02c-1.42,.85-1.89,2.69-1.04,4.11,.56,.94,1.56,1.46,2.58,1.46,.52,0,1.05-.14,1.53-.42l10.09-6.02c1.42-.85,1.89-2.69,1.04-4.11-.85-1.42-2.69-1.89-4.11-1.04Z"/>
            <path class="cls-1" d="M129.76,44.13c.52,0,1.05-.14,1.53-.42l10.09-6.02c1.42-.85,1.89-2.69,1.04-4.11-.85-1.42-2.69-1.89-4.11-1.04l-10.09,6.02c-1.42,.85-1.89,2.69-1.04,4.11,.56,.94,1.56,1.46,2.58,1.46Z"/>
            <path class="cls-1" d="M90.79,17.3c.25,.06,.49,.09,.74,.09,1.34,0,2.56-.91,2.91-2.27l2.88-11.39c.41-1.61-.57-3.24-2.17-3.64-1.61-.41-3.24,.57-3.64,2.17l-2.88,11.39c-.41,1.61,.57,3.24,2.17,3.64Z"/>
            <path class="cls-1" d="M62.51,128.11c-1.61-.41-3.24,.57-3.64,2.17l-2.88,11.39c-.41,1.61,.57,3.24,2.17,3.64,.25,.06,.49,.09,.74,.09,1.34,0,2.56-.91,2.91-2.27l2.88-11.39c.41-1.61-.57-3.24-2.17-3.64Z"/>
            <path class="cls-1" d="M5.72,59.35l11.39,2.88c.25,.06,.49,.09,.74,.09,1.34,0,2.56-.91,2.91-2.27,.41-1.61-.57-3.24-2.17-3.64l-11.39-2.88c-1.61-.41-3.24,.57-3.64,2.17-.41,1.61,.57,3.24,2.17,3.64Z"/>
            <path class="cls-1" d="M151.59,89.05l-11.39-2.88c-1.61-.41-3.24,.57-3.64,2.17s.57,3.24,2.17,3.64l11.39,2.88c.25,.06,.49,.09,.74,.09,1.34,0,2.56-.91,2.91-2.27,.41-1.61-.57-3.24-2.17-3.64Z"/>
            <path class="cls-1" d="M47,43.32c-1.71-2.72-6.03-.21-4.32,2.52,4.2,6.69,4.79,14.77,7.65,22,.5,1.26,1.67,2.13,3.08,1.75,1.2-.33,2.24-1.81,1.75-3.08-1.46-3.71-2.38-7.62-3.45-11.46,5.66,1.8,11.05,4.58,15.64,8.37,1.04,.86,2.52,1.02,3.54,0,.89-.89,1.05-2.67,0-3.54-4.28-3.54-9.06-6.31-14.19-8.34,.66-.79,1.3-1.6,1.94-2.36,1.47-1.73,2.88-3.7,4.61-5.18,1.03-.88,.9-2.63,0-3.54-1.02-1.02-2.51-.88-3.54,0-1.73,1.48-3.14,3.45-4.61,5.18-1.47,1.73-2.88,3.7-4.61,5.18-.02,.01-.03,.03-.04,.04-.88-2.62-1.95-5.17-3.44-7.56Z"/>
            <path class="cls-1" d="M80.93,61.66c.01-2.46,.16-4.96,.38-7.44,.68-.19,1.34-.41,1.94-.61,2.27-.73,4.5-1.58,6.74-2.42,.43-.16,.85-.32,1.28-.48,2.25,2.15,4.52,4.28,6.66,6.55,2.21,2.34,5.74-1.2,3.54-3.54-1.59-1.69-3.26-3.3-4.94-4.91,.1-.03,.19-.07,.28-.1,.88-.29,1.77-.57,2.68-.78,.31-.07,1.31-.11,.42-.11,.26,0,.52-.05,.78-.01,1.34,.16,2.5-1.26,2.5-2.5,0-1.49-1.15-2.34-2.5-2.5-1.55-.19-3.35,.49-4.81,.95-1.13,.36-2.26,.76-3.38,1.17-1.39-1.37-2.74-2.77-4.01-4.24-1.18-1.37-2.2-3.41-3.82-4.27-1.74-.91-3.89-.47-5.21,.94-1.1,1.17-1.26,2.91-1.52,4.43-.49,2.79-.86,5.61-1.17,8.43-.5,.5-.82,1.19-.82,1.84,0,.58,.18,1.07,.48,1.45-.26,2.71-.47,5.43-.48,8.14-.02,3.22,4.98,3.22,5,0Zm4.4-16.99c.66,.75,1.33,1.47,2.02,2.18-1.67,.63-3.35,1.25-5.04,1.81-.14,.04-.27,.09-.41,.13,.13-1.01,.27-2.03,.41-3.02,.19-1.29,.4-2.57,.65-3.85,0-.05,.02-.1,.03-.15,.82,1.04,2.07,2.61,2.34,2.9Zm-2.12-4.01c-.05-.17,.04-.06,0,0h0Z"/>
            <path class="cls-1" d="M53.06,93.1c-1.21-.64-2.7-.3-3.42,.9-.3,.5-.61,1-.95,1.48-.1,.15-.21,.29-.31,.44h0c-.18,.23-.36,.45-.55,.66-.3,.33-.61,.65-.95,.95-.07,.06-.31,.26-.4,.33-.11,.07-.3,.2-.35,.24-.23,.15-.48,.27-.72,.4,0,0-.02,.02-.1,.05-.03,.02-.07,.03-.1,.05,.04-.03,.06-.03,.09-.05-.05,.02-.11,.05-.18,.07-.17,.06-.35,.11-.53,.15-.02,0-.18,.04-.31,.07h-.06c-.33,.02-.65,0-.97,0-.11-.02-.22-.04-.34-.07-.29-.07-.57-.16-.85-.26,0,0,.02,.01,.02,.02,0,0-.02-.02-.03-.03-.02,0-.04-.01-.06-.02-.17-.06-.21-.09-.19-.09-.04-.01-.07-.03-.09-.04-.28-.14-.55-.29-.82-.46-.22-.14-.44-.28-.66-.44-.08-.06-.17-.14-.26-.2l-.03-.03c-.37-.3-.72-.62-1.07-.96-.29-.28-.57-.57-.84-.86-.15-.16-.3-.33-.45-.5-.18-.21-.36-.42-.54-.63,0,0-.09-.11-.14-.17-.05-.07-.17-.23-.19-.26-.31-.43-.59-.88-.85-1.34-.11-.2-.22-.4-.33-.61-.05-.1-.1-.2-.15-.3,0-.02-.05-.12-.09-.2-.04-.11-.13-.33-.15-.39-.08-.22-.15-.45-.21-.68-.05-.19-.1-.38-.14-.57-.01-.05-.04-.19-.06-.31,0-.06-.04-.34-.05-.4-.01-.21-.02-.41-.02-.62,0-.17,0-.35,.02-.52,0-.07,.01-.15,.02-.22,0,0,0-.01,0-.07v-.04h0c.02-.09,.03-.17,.05-.25,.04-.19,.09-.37,.14-.55,.04-.15,.09-.31,.15-.46,.01-.04,.03-.08,.04-.12,.14-.25,.25-.52,.4-.77,.09-.15,.19-.3,.29-.45,.01-.02,.03-.04,.04-.06,.21-.2,.38-.44,.59-.64,.12-.12,.25-.23,.38-.35,.02-.01,.03-.03,.05-.04,.28-.16,.53-.36,.82-.52,.13-.07,.26-.13,.39-.2,.05-.02,.1-.04,.11-.05,.31-.1,.62-.2,.94-.26,.02,0,.04,0,.06-.01,.11,.02,.35-.04,.44-.04,.16,0,.32,0,.47,0,.02,0,.04,0,.07,0,.09,.02,.33,.06,.4,.07,.15,.04,.3,.09,.46,.14h.02c.12,.08,.26,.14,.38,.21,.02,0,.16,.09,.28,.17,.08,.08,.17,.15,.25,.22,.96,.89,2.6,1.02,3.54,0,.89-.97,1.02-2.58,0-3.54-2.81-2.61-6.72-2.86-10.07-1.18-3.36,1.68-5.45,5.2-5.71,8.89-.31,4.36,2.17,8.36,5.06,11.4,1.88,1.97,4.26,3.8,6.97,4.39,2.21,.48,4.4,.17,6.4-.9,2.54-1.35,4.4-3.79,5.86-6.21,.67-1.12,.29-2.79-.9-3.42Zm-11.34-9.63c.08,.05,.14,.1,.14,.11,0,.01-.07-.05-.14-.11Zm-2.35-.64c.29-.06-.02,.02-.18,.03,.06-.01,.12-.02,.18-.03Zm4.82,16.03s-.05,0-.05,0c0,0,.02,0,.05,0Zm4.2-2.97c.04-.05,.13-.16,0,0h0Z"/>
            <path class="cls-1" d="M42.04,98.51c-.07-.08-.23-.13-.26-.12,.09,.03,.19,.07,.24,.11h.01Z"/>
            <path class="cls-1" d="M45.39,98.5s-.05,.02-.11,.06h.01s.07-.04,.1-.06Z"/>
            <path class="cls-1" d="M34.69,87.67v.04s.02-.07,0-.1c0,.02,0,.02,0,.03v.03Z"/>
            <path class="cls-1" d="M69.54,83.83c-.72-4.51-1.33-9.03-2.69-13.4-.95-3.06-5.78-1.76-4.82,1.33,1,3.2,1.59,6.48,2.12,9.77-.75,.11-1.44,.45-2.13,.75-.64,.27-1.28,.55-1.92,.83-.11,.04-.22,.09-.33,.1l.13-.02c-.33,.07-.64,.21-.92,.4-.61-2.31-1.31-4.58-2.23-6.8-.52-1.25-1.66-2.14-3.08-1.75-1.18,.32-2.27,1.82-1.75,3.08,2.98,7.2,3.78,15.07,6.08,22.48,.95,3.06,5.78,1.76,4.82-1.33-1.14-3.66-1.9-7.43-2.75-11.18,.11,.02,.23,.03,.34,.03,.87-.04,1.64-.46,2.42-.79,.64-.27,1.28-.55,1.92-.83,.06-.02,.11-.04,.17-.05,.58,3.49,1.34,7.13,3.36,10.07,.76,1.11,2.19,1.61,3.42,.9,1.1-.64,1.67-2.3,.9-3.42-2.02-2.94-2.52-6.7-3.07-10.17Zm-9.44-.73c.19-.08,.37-.16,.56-.24-.18,.07-.37,.16-.56,.24Zm4.1,3.63c.18-.07,.37-.16,.56-.24-.19,.08-.37,.16-.56,.24Z"/>
            <path class="cls-1" d="M77.23,71.1c.14-1.34-1.25-2.5-2.5-2.5-1.47,0-2.36,1.15-2.5,2.5-.84,7.88,.96,15.88,2.89,23.47,.79,3.12,5.62,1.8,4.82-1.33-1.83-7.2-3.51-14.67-2.71-22.14Z"/>
            <path class="cls-1" d="M96.84,72.87c-.21-.78-.4-1.57-.54-2.36-.03-.15-.05-.29-.07-.44,0-.05-.01-.11-.02-.18-.03-.36-.05-.72-.04-1.08,.03-3.22-4.97-3.22-5,0-.03,3.43,1.23,6.84,2.3,10.05,.09,.27,.18,.54,.27,.8-.54-.52-1.07-1.05-1.62-1.56-2.86-2.68-5.92-5.42-9.42-7.22-1.2-.62-2.71-.31-3.42,.9-.19,.33-.29,.7-.31,1.08-.13,.3-.19,.62-.15,.96,.87,6.66,3.33,12.81,5.46,19.13,.43,1.28,1.72,2.12,3.08,1.75,1.25-.34,2.18-1.79,1.75-3.08-1.5-4.44-3.31-8.89-4.44-13.46,1.41,1.13,2.74,2.37,4.14,3.69,2.76,2.6,5.37,5.34,7.94,8.12,1.43,1.55,4.38,.39,4.27-1.77-.19-3.49-1.45-6.85-2.54-10.13-.57-1.72-1.15-3.44-1.62-5.19Z"/>
            <path class="cls-1" d="M119.17,73.72s-.06,0-.09,.02h.03s.04-.01,.06-.02Z"/>
            <path class="cls-1" d="M125.84,89.26c1.36-.44,2.02-1.7,1.75-3.08-.4-1.99-.9-3.96-1.3-5.94-.06-.28-.11-.57-.15-.86v-.1c-.03-.15-.05-.29-.07-.44-.11-1-.2-2-.29-3.01,.03-.79-.08-1.58-.44-2.3-.2-.39-.51-.67-.87-.88,0,0-.01-.01-.02-.02s-.02,0-.03-.01c-.14-.07-.29-.14-.44-.18-.16-.05-.32-.08-.48-.1-.06,0-.13-.02-.19-.02-.1,0-.19,0-.29,0-.13,0-.26,.03-.39,.05-.04,0-.08,.02-.13,.03-.2,.05-.4,.12-.58,.23-.39,.21-.79,.42-1.2,.6l-.07,.03c-.15,.04-.32,.13-.46,.18-.24,.08-.49,.15-.74,.21-.08,.02-.18,.03-.28,.04,.18-.02,.36,0,.02,.01-.03,0-.05,0-.08,0-.04,0-.09,.01-.12,.03,.02-.01,.05-.02,.09-.03-1.33,.07-2.67-.02-4-.02-1.31,0-2.56,1.15-2.5,2.5,.06,1.35,1.1,2.5,2.5,2.5,1.44,0,2.91,.15,4.34,0,.17-.02,.33-.06,.5-.09-.14,.3-.29,.59-.46,.87-.17,.29-.35,.57-.54,.85-.05,.08-.11,.15-.16,.23-.03,.03-.14,.17-.23,.28-.23,.26-.47,.51-.73,.75-.12,.11-.24,.21-.36,.32-.05,.04-.11,.08-.16,.12-.3,.2-.61,.38-.93,.55-.06,.03-.12,.06-.18,.08-.17,.06-.35,.13-.52,.18-.19,.06-.37,.1-.56,.15-.05,.01-.24,.04-.35,.07-.12,.01-.33,.03-.39,.03-.25,.01-.5,.02-.75,0-.23,0-.45-.03-.68-.04-.07,0-.1,0-.13,0-.03,0-.06-.02-.15-.04-.55-.13-1.09-.25-1.63-.42-.27-.09-.53-.18-.8-.28-.05-.02-.06-.02-.08-.03-.06-.03-.12-.05-.17-.08-.42-.21-.83-.43-1.23-.69-.12-.08-.61-.43-.52-.36,.1,.08-.32-.27-.41-.36-.19-.17-.37-.35-.55-.53-.07-.07-.4-.45-.4-.43-.71-.92-1.03-1.63-1.2-2.7-.03-.2-.03-.9,0-1.36,0-.1,.02-.2,.03-.3,0-.06,.02-.13,.03-.19,.14-.73,.3-1.45,.52-2.17,.11-.37,.24-.74,.37-1.1,.06-.17,.13-.34,.2-.52,.04-.1,.08-.19,.13-.29,.37-.78,.78-1.55,1.27-2.27,.11-.16,.22-.31,.33-.46,.02-.02,.22-.28,.29-.37,.32-.37,.66-.72,1.02-1.05,.08-.07,.3-.25,.35-.3,.15-.11,.31-.22,.47-.33,.21-.13,.42-.26,.63-.37,.08-.04,.37-.18,.48-.23,.12-.04,.42-.15,.5-.17,.25-.08,.5-.13,.75-.19,.13-.03,.2-.05,.22-.06,.02,0,.06,0,.12,0,.28-.02,.55-.04,.83-.04,.29,0,.58,.01,.86,.03,0,0,.11,.01,.18,.02,.1,.02,.29,.05,.32,.05,.71,.14,1.4,.33,2.08,.57,1.28,.44,2.73-.5,3.08-1.75,.38-1.37-.46-2.63-1.75-3.08-5-1.72-10.37-.6-13.82,3.53-2.62,3.15-4.44,7.43-4.52,11.57-.12,5.95,5.18,10.5,10.68,11.53,4.19,.78,8-.5,10.77-3.5,.24,1.07,.49,2.13,.7,3.2,.26,1.28,1.85,2.14,3.08,1.75Zm-9.72-6.59c-.08,.03-.1,.04,0,0h0Z"/>
            `);

    var mouseover = function() {
        PopUp
            .style("opacity", 1);
        kaChing
            .style("fill-opacity", 1);
    }

    var mousemove = function(d) {
        if (d3.select("#real").property("checked")) {
            PopUp
                .html(d.statement + "<br><h1>CHF " + d3.format(",.2f")(d.expense) + "</h1>");
        } else {
            PopUp
                .html(d.text + "<br><h1>CHF " + d3.format(",.2f")(d.expense) + "</h1>");
        }
        kaChing
            .attr("transform", "translate (" + (d3.mouse(this)[0] + 70) + "," + (d3.mouse(this)[1]) + ")")
            // .attr("transform", "translate(0,0)")
    }

    var mouseleave = function() {
        PopUp
            .style("opacity", 0)
        kaChing
            .style("fill-opacity", 0)
    }

    // if filtered dataset has more circles than already existing, transition new ones in

    locations
        .enter()
        .append("circle")
        .attr("class", "location")
        .attr("cx", function(d) {
            return (parseInt(d.xpos));
        })
        .attr("cy", (d) => y(d.date.getHours()))
        .attr("id", function(d) {
            return (d.id);
        })
        .style("fill", (d) => colors[d.type])
        .style("stroke", (d) => colors[d.type])
        .style("stroke-width", 2)
        .style("fill-opacity", 1)
        .on("mouseover", mouseover)
        .on("mousemove", mousemove)
        .on("mouseleave", mouseleave);

    // if filtered dataset has less circles than already existing, remove excess
    locations
        .exit()
        .remove();
}

// linking

d3.select("#info-link")
    .attr("href", "#info-text")
    .html('about &#8594;')

// if (d3.select("#info-link")) {
// }


// update

d3.select("#trans")
    .on("change", update);
update();

function update(h) {
    // update position and text of label according to slider scale
    if (d3.select("#trans").property("checked")) {
        d3.selectAll(".location")
            .style("fill-opacity", 0);
        // d3.selectAll(".popup")
        //     .style("background-color", "unset")
    } else {
        d3.selectAll(".location")
            .style("fill-opacity", 1);
        // d3.selectAll(".popup")
        //     .style("background-color", "var--(white)")
    }

    handle
        .attr("cx", x(h));
    label
        .attr("x", x(h))
        .text(formatDate(h));



    plot.selectAll(".location")
        .filter(function(d) { return d.timestamp > Date.parse(h) }) //select all the countries and prepare for a transition to new values
        .style("opacity", 0)
        .attr("r", 0);

    plot.selectAll(".location")
        .transition()
        .filter(function(d) { return d.timestamp <= Date.parse(h) }) //select all the countries and prepare for a transition to new values
        .attr("r", getExpenseValue)
        .duration(400)
        .style("opacity", 1)
        .attr("r", getExpenseValueZoom)
        .transition()
        .attr("r", getExpenseValue);
}

var circles = d3.selectAll('circle')
var zOrders = {
    radii: circles[0].map(function(cv) {
        return cv.r.baseVal.value;
    }),
}

console.log(circles[0])

circles.data(zOrders[setOrderBy]);

circles.sort(setOrder);